{"version":3,"sources":["tree.js"],"names":["createTree","value","data","children","parent","addChild","node","newNode","push","travel","tree","fn","i","length","find","result","undefined","removeNode","siblings","index","splice","node2","node3","node5","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA,aAAa,oBAACC,KAAD,EAAU;AACnB,WAAO;AACHC,cAAMD,KADH;AAEHE,kBAAU,IAFP;AAGHC,gBAAO;AAHJ,KAAP;AAKH,CAND;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAML,KAAN,EAAgB;AAC7B,QAAMM,UAAU;AACZL,cAAMD,KADM;AAEZE,kBAAW,IAFC;AAGZC,gBAAQE;AAHI,KAAhB;AAKAA,SAAKH,QAAL,GAAeG,KAAKH,QAAL,IAAiB,EAAhC;AACAG,SAAKH,QAAL,CAAcK,IAAd,CAAmBD,OAAnB;AACA,WAAOA,OAAP;AACH,CATD;AAUA,IAAME,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOC,EAAP,EAAY;AACvBA,OAAGD,IAAH;AACA,QAAG,CAACA,KAAKP,QAAT,EAAkB;AAAC;AAAO;AAC1B,SAAI,IAAIS,IAAE,CAAV,EAAYA,IAAEF,KAAKP,QAAL,CAAcU,MAA5B,EAAmCD,GAAnC,EAAuC;AACnCH,eAAOC,KAAKP,QAAL,CAAcS,CAAd,CAAP,EAAwBD,EAAxB;AACH;AACJ,CAND;;AAQA,IAAMG,OAAM,SAANA,IAAM,CAACJ,IAAD,EAAOJ,IAAP,EAAc;AACtB,QAAGI,SAASJ,IAAZ,EAAiB;AACb,eAAOI,IAAP;AACH,KAFD,MAEM,IAAGA,KAAKP,QAAR,EAAiB;AACnB,aAAI,IAAIS,IAAG,CAAX,EAAaA,IAAEF,KAAKP,QAAL,CAAcU,MAA7B,EAAoCD,GAApC,EAAwC;AACrC,gBAAMG,SAAUD,KAAKJ,KAAKP,QAAL,CAAcS,CAAd,CAAL,EAAsBN,IAAtB,CAAhB;AACC,gBAAGS,MAAH,EAAU;AAAC,uBAAOA,MAAP;AAAc;AAC5B;AACD,eAAOC,SAAP;AACH,KANK,MAMD;AACD,eAAOA,SAAP;AACH;AACJ,CAZD;;AAcA,IAAMC,aAAa,SAAbA,UAAa,CAACP,IAAD,EAAOJ,IAAP,EAAgB;AAC/B,QAAMY,WAAWZ,KAAKF,MAAL,CAAYD,QAA7B;AACA,QAAIgB,QAAQ,CAAZ;AACA,SAAI,IAAIP,IAAE,CAAV,EAAYA,IAAEM,SAASL,MAAvB,EAA8BD,GAA9B,EAAkC;AAC9B,YAAGM,SAASN,CAAT,MAAcN,IAAjB,EAAsB;AAClBa,oBAAQP,CAAR;AACH;AACJ;AACDM,aAASE,MAAT,CAAgBD,KAAhB,EAAsB,CAAtB;AACH,CATD;;AAYA,IAAMT,OAAOV,WAAW,EAAX,CAAb;AACA,IAAMqB,QAAQhB,SAASK,IAAT,EAAc,EAAd,CAAd;AACA,IAAMY,QAAQjB,SAASK,IAAT,EAAc,EAAd,CAAd;AACAL,SAASK,IAAT,EAAc,EAAd;AACA,IAAMa,QAAQlB,SAASK,IAAT,EAAc,EAAd,CAAd;AACAL,SAASgB,KAAT,EAAe,GAAf;AACAhB,SAASgB,KAAT,EAAe,GAAf;AACAhB,SAASgB,KAAT,EAAe,GAAf;AACAhB,SAASgB,KAAT,EAAe,GAAf;AACAG,QAAQC,GAAR,CAAYf,IAAZ;;AAEA,IAAMC,KAAK,SAALA,EAAK,OAAQ;AACfa,YAAQC,GAAR,CAAYnB,KAAKJ,IAAjB;AACH,CAFD;;AAKAe,WAAWP,IAAX,EAAgBa,KAAhB;;AAEAC,QAAQC,GAAR,CAAYf,IAAZ","file":"tree.398752fd.map","sourceRoot":"..\\src","sourcesContent":["\r\ncreateTree = (value)=> {\r\n    return {\r\n        data: value,\r\n        children: null,\r\n        parent:null,\r\n    }\r\n}\r\nconst addChild = (node,value) => {\r\n    const newNode = {\r\n        data: value,\r\n        children:  null,\r\n        parent: node,\r\n    }\r\n    node.children =node.children || []\r\n    node.children.push(newNode)\r\n    return newNode\r\n}\r\nconst travel = (tree, fn)=>{\r\n    fn(tree);\r\n    if(!tree.children){return}\r\n    for(let i=0;i<tree.children.length;i++){\r\n        travel(tree.children[i],fn)\r\n    }\r\n}\r\n\r\nconst find =(tree, node)=>{\r\n    if(tree === node){\r\n        return tree\r\n    }else if(tree.children){\r\n        for(let i =0;i<tree.children.length;i++){\r\n           const result =  find(tree.children[i],node)\r\n            if(result){return result}\r\n        }\r\n        return undefined\r\n    }else{\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst removeNode = (tree, node) => {\r\n    const siblings = node.parent.children\r\n    let index = 0\r\n    for(let i=1;i<siblings.length;i++){\r\n        if(siblings[i]===node){\r\n            index = i\r\n        }\r\n    }\r\n    siblings.splice(index,1)\r\n}\r\n\r\n\r\nconst tree = createTree(10)\r\nconst node2 = addChild(tree,20)\r\nconst node3 = addChild(tree,30)\r\naddChild(tree,40)\r\nconst node5 = addChild(tree,50)\r\naddChild(node2,201)\r\naddChild(node2,202)\r\naddChild(node2,203)\r\naddChild(node2,204)\r\nconsole.log(tree)\r\n\r\nconst fn = node => {\r\n    console.log(node.data)\r\n}\r\n\r\n\r\nremoveNode(tree,node5)\r\n\r\nconsole.log(tree)"]}